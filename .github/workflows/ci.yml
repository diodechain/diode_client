name: "CI"
on: ["push", "pull_request"]

jobs:
  build_and_test:
    name: "Run tests and build artifacts"
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macOS-latest"]
        go: ["1.15.x"]
    runs-on: ${{ matrix.os }}
    env:
      OPENSSL_URL: https://www.openssl.org/source/openssl-1.1.0l.tar.gz
      OPENSSL_HASH: 74a2f756c64fd7386a29184dc0344f4831192d61dc2481a93a4c5dd727f41148
    steps:
    - uses: msys2/setup-msys2@v2
      if: runner.os == 'Windows'
      with:
          install: pacman-mirrors pkg-config base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-go upx
          update: false
    - if: runner.os == 'Windows'
      shell: msys2 {0}  
      run: |
        echo "Build and install openssl......"
        wget -O openssl.tar.gz $OPENSSL_URL
        [ "$OPENSSL_HASH" = "$(sha256sum openssl.tar.gz | cut -d ' ' -f1)" ]
        tar -xzf openssl.tar.gz
        cd ./openssl-1.1.0l
        ./Configure no-ssl3 no-ssl3-method no-zlib mingw64 --prefix=/mingw64 --openssldir=/mingw64
        make && make install_sw install_ssldirs
        echo "PKG_CONFIG_PATH=/mingw64/lib/pkgconfig" >> $GITHUB_ENV
    - if: runner.os == 'macOS'
      run: |
        brew install binutils coreutils wget openssl
        echo "Build and install openssl......"
        wget -O openssl.tar.gz $OPENSSL_URL
        [ "$OPENSSL_HASH" = "$(sha256sum openssl.tar.gz | cut -d ' ' -f1)" ]
        tar -xzf openssl.tar.gz
        cd ./openssl-1.1.0l
        ./config no-ssl3 no-ssl3-method no-zlib --prefix=/usr/local/opt/openssl
        make && sudo make install_sw install_ssldirs
        echo "/usr/local/opt/binutils/bin" >> $GITHUB_PATH
    - if: runner.os == 'Linux'
      run: |
        echo "Build and install openssl......"
        sudo mkdir /usr/local/openssl
        wget -O openssl.tar.gz $OPENSSL_URL
        [ "$OPENSSL_HASH" = "$(sha256sum openssl.tar.gz | cut -d ' ' -f1)" ]
        tar -xzf openssl.tar.gz
        cd ./openssl-1.1.0l
        ./config no-ssl3 no-ssl3-method no-zlib --prefix=/usr/local/openssl
        make && sudo make install_sw install_ssldirs
        echo "PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig" >> $GITHUB_ENV
    - uses: actions/checkout@v1
    - uses: actions/setup-go@v1
      if: runner.os != 'Windows'
      with:
        go-version: ${{ matrix.go }}
    - if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make windows_test
        make dist
    - if: runner.os == 'macOS'
      run: |
        make ci_test
        rm /usr/local/opt/openssl/lib/*.dylib
        make dist
    - if: runner.os == 'Linux'
      run: |
        make ci_test
        make dist
    - run: echo "ZIPNAME=`./deployment/zipname.sh`" >> $GITHUB_ENV
      shell: bash
    - if: runner.os == 'macOS'
      run: |
        mkdir darwin_package_build
        DIODE_BUILD_DST=darwin_package_build DIODE_BINARY_DIRECTORY=dist sh darwin_package.sh
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ZIPNAME }}
        path: dist
    - name: Archive macos package production artifacts
      uses: actions/upload-artifact@v1
      if: runner.os == 'macOS'
      with:
        name: ${{ runner.os }}
        path: darwin_package_build

  download_and_run_test:
    needs: build_and_test
    name: "Run app"
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macOS-latest"]
        go: ["1.14.x"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - run: echo "ZIPNAME=`./deployment/zipname.sh`" >> $GITHUB_ENV
      shell: bash
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.ZIPNAME }}
    - run: |
        chmod +x ./diode 
        ./diode config -list
        ./diode time
      shell: bash

  build_linux_arm:
    name: "Run build linux arm artifact"
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/checkout@v1
    - run: |
        echo "Clone diodechain/cross-compile"
        git clone https://github.com/diodechain/cross-compile.git
    - run: |
        echo "Build docker image for arm32......"
        docker build --build-arg branch=master -t pi-zero cross-compile/pi-zero
    - run: |
        echo "Build diode linux arm32......"
        docker run -v ${{ github.workspace }}:/build/diode_go_client pi-zero make archive
        mv diode_linux_amd64.zip diode_linux_arm.zip
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "diode_linux_arm.zip"
        path: ${{ github.workspace }}/diode_linux_arm.zip
    - run: |
        echo "Build docker image for arm64......"
        docker build --build-arg branch=master -t pi-arm64 cross-compile/pi-arm64
    - run: |
        echo "Build diode linux arm64......"
        docker run -v ${{ github.workspace }}:/build/diode_go_client pi-arm64 make archive
        mv diode_linux_amd64.zip diode_linux_arm64.zip
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "diode_linux_arm64.zip"
        path: ${{ github.workspace }}/diode_linux_arm64.zip

  lint:
    name: "Run static analysis"
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/setup-go@v1
      with:
        go-version: "1.14.x"
    - uses: actions/checkout@v2
    - run: make 

  seccheck:
    name: "Run security analysis"
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/setup-go@v1
      with:
        go-version: "1.14.x"
    - uses: actions/checkout@v2
    - run: make seccheck
