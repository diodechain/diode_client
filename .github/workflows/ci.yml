name: "CI"
on: ["push", "pull_request"]

jobs:
  build_and_test:
    name: "Run tests and build artifacts"
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macOS-latest"]
        go: ["1.14.x"]
    runs-on: ${{ matrix.os }}
    steps:
    - if: runner.os == 'Windows'
      run: |
        echo "::add-path::C:\\msys64\\usr\\bin"
        echo "::add-path::C:\\msys64\\mingw64\\bin"
        echo "::set-env name=PKG_CONFIG_PATH::/mingw64/lib/pkgconfig"
    - if: runner.os == 'Windows'
      run: |
        pacman -S --noconfirm pacman-mirrors pkg-config
        pacman -S --noconfirm --needed base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain mingw-w64-x86_64-openssl upx
    - if: runner.os == 'macOS'
      run: |
        brew install binutils
        brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/b1f92701367028062abb3518426aa5d8dacc224b/Formula/upx.rb
        rm /usr/local/opt/openssl/lib/*.dylib
        echo "::add-path::/usr/local/opt/binutils/bin"
    - uses: actions/checkout@v1
    - uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go }}
    - run: make test
    - run: make dist
    - run: echo "::set-env name=ZIPNAME::`./deployment/zipname.sh`"
      shell: bash
    - if: runner.os == 'macOS'
      run: |
        mkdir darwin_package_build
        DIODE_BUILD_DST=darwin_package_build DIODE_BINARY_DIRECTORY=dist sh darwin_package.sh
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ZIPNAME }}
        path: dist
    - name: Archive macos package production artifacts
      uses: actions/upload-artifact@v1
      if: runner.os == 'macOS'
      with:
        name: ${{ runner.os }}
        path: darwin_package_build

  simple_run_test:
    needs: build_and_test
    name: "Run app"
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macOS-latest"]
        go: ["1.14.x"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - run: echo "::set-env name=ZIPNAME::`./deployment/zipname.sh`"
      shell: bash
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.ZIPNAME }}
    - if: runner.os == 'macOS'
      run: brew remove openssl
    - run: |
        chmod +x ./diode 
        ./diode config -list
        ./diode time
      shell: bash

  lint:
    name: "Run static analysis"
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/setup-go@v1
      with:
        go-version: "1.14.x"
    - uses: actions/checkout@v2
    - run: make lint
